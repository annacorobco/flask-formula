version: '2.1'

volumes:
  db:
    driver: local
  elasticdata:
    driver: local
  redis-data:
    driver: local

services:
  web:
      image: trydirect/flask-formula:app
      build: build/app
      container_name: web
      restart: always
      entrypoint: /usr/bin/supervisord -c /etc/supervisor/supervisord.conf -n
      volumes:
        - ./configs/supervisord/flask_formula.conf:/etc/supervisor/conf.d/flask_formula.conf
        - ./backend:/app/web
      links:
       - db
       - mq
      depends_on:
        - db
        - mq
      ports:
       - "8000:8000"
      env_file: .env
  elasticsearch:
    image: elasticsearch:5.4.3
    restart: always
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    links:
      - web
    depends_on:
      - web
    volumes:
      - elasticdata:/usr/share/elasticsearch/data
      - ./configs/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"

  kibana:
      image: kibana:5.4.3
      restart: always
      container_name: kibana
      depends_on:
        - elasticsearch
      ports:
        - "5601:5601"
      links:
        - elasticsearch
      env_file:
        - .env
      volumes:
        - ./configs/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

  logstash:
    build: ./build/logstash
    container_name: logstash
    restart: always
    environment:
      LS_JAVA_OPTS: "-Xms1g -Xmx4g"
    ports:
      - "5044"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:6.7.1
    restart: always
    container_name: filebeat
    user: 0:0
    env_file:
      - .env
    volumes:
      - ./configs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - logstash

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - 6379
    volumes:
      - redis-data:/data
    env_file:
      - .env
    healthcheck:
      timeout: 5s
      interval: 5s
      retries: 5
      test:
         - "CMD"
         - "bash"
         - "-c"
         - "exec 3<> /dev/tcp/127.0.0.1/6379 && echo PING >&3 && head -1 <&3 | grep PONG"


  db:
    image: postgres:9.4
    container_name: db
    restart: always
    ports:
      #- "5432:5432" - publish port to the world.
      - "5432"
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data/pgdata
      - ./scripts/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh


# entry point
  nginx:
    image: trydirect/nginx
    container_name: nginx
    restart: always
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    links:
      - web
      - kibana
    volumes:
      - .htpasswd:/etc/nginx/conf.d/.htpasswd
      - ./configs/certs/ssl:/etc/nginx/ssl
      - ./configs/certs/letsencrypt:/etc/letsencrypt
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/conf.d:/etc/nginx/conf.d
      - ./configs/supervisord:/etc/supervisor/conf.d/
      - ./configs/cron/nginx:/var/spool/cron/crontabs
      - ./backend/app:/var/www/html
    entrypoint: /usr/bin/supervisord -c /etc/supervisor/supervisord.conf -n

  # basic data bus for interaction between servers
  mq:
    container_name: mq
    image: rabbitmq:3-management
    restart: always
    env_file:
      - .env
    ports:
      # note! from others containers need connect to 5672 port, not 2172
      # 2172 using for debug
      - "2172:5672"
      - "5672"
      - "21072:15672"
    healthcheck:
      timeout: 5s
      interval: 5s
      retries: 5
      test: ["CMD", "rabbitmqctl", "status"]

#  pmm:
#    image: trydirect/flask-formula:pmm
#    restart: always
